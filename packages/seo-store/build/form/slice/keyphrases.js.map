{"version":3,"sources":["../../../src/form/slice/keyphrases.js"],"names":["createSlice","nanoid","createSelector","get","keys","map","FOCUS_KEYPHRASE_ID","MAX_RELATED_KEYPHRASES","defaultKeyphrasesState","id","keyphrase","synonyms","prepareWithFocusKeyphraseIdFallback","payload","keyphrasesSlice","name","initialState","reducers","updateKeyphrase","prepare","reducer","state","action","updateSynonyms","addRelatedKeyphrase","length","selectors","selectKeyphraseEntries","selectKeyphrase","selectKeyphraseSynonyms","selectKeyphraseIds","keyphrasesSelectors","selectKeyphrases","keyphraseEntries","selectSynonyms","keyphrasesActions","actions"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createSelector } from \"@reduxjs/toolkit\";\nimport { get, keys, map } from \"lodash\";\nimport { FOCUS_KEYPHRASE_ID } from \"../../common/constants\";\n\nexport const MAX_RELATED_KEYPHRASES = 4;\n\nexport const defaultKeyphrasesState = {\n\t[ FOCUS_KEYPHRASE_ID ]: {\n\t\tid: FOCUS_KEYPHRASE_ID,\n\t\tkeyphrase: \"\",\n\t\tsynonyms: \"\",\n\t},\n};\n\n/**\n * Adds the focus keyphrase ID if no ID is given.\n * @param {Object} payload The payload.\n * @returns {Object} The payload with guaranteed ID.\n */\nconst prepareWithFocusKeyphraseIdFallback = ( payload ) => ( {\n\tpayload: {\n\t\t...payload,\n\t\tid: payload.id || FOCUS_KEYPHRASE_ID,\n\t},\n} );\n\nconst keyphrasesSlice = createSlice( {\n\tname: \"keyphrases\",\n\tinitialState: defaultKeyphrasesState,\n\treducers: {\n\t\tupdateKeyphrase: {\n\t\t\t// Fallback to focus keyphrase if no ID is given.\n\t\t\tprepare: prepareWithFocusKeyphraseIdFallback,\n\t\t\treducer: ( state, action ) => {\n\t\t\t\t// Ignore update request for non-existing keyphrases.\n\t\t\t\tif ( ! state[ action.payload.id ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\t\t\t\tstate[ action.payload.id ].keyphrase = action.payload.keyphrase;\n\t\t\t},\n\t\t},\n\t\tupdateSynonyms: {\n\t\t\t// Fallback to focus keyphrase if no ID is given.\n\t\t\tprepare: prepareWithFocusKeyphraseIdFallback,\n\t\t\treducer: ( state, action ) => {\n\t\t\t\t// Ignore update request for non-existing keyphrases.\n\t\t\t\tif ( ! state[ action.payload.id ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\t\t\t\tstate[ action.payload.id ].synonyms = action.payload.synonyms;\n\t\t\t},\n\t\t},\n\t\taddRelatedKeyphrase: {\n\t\t\t// Generate an ID if missing.\n\t\t\tprepare: ( payload = {} ) => ( {\n\t\t\t\tpayload: {\n\t\t\t\t\t...payload,\n\t\t\t\t\tid: payload.id || nanoid(),\n\t\t\t\t},\n\t\t\t} ),\n\t\t\treducer: ( state, action ) => {\n\t\t\t\t// Only add keyphrases when there are less than the max (plus the focus keyphrase).\n\t\t\t\tif ( keys( state ).length > MAX_RELATED_KEYPHRASES ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tstate[ action.payload.id ] = {\n\t\t\t\t\tid: action.payload.id,\n\t\t\t\t\tkeyphrase: action.payload.keyphrase ?? \"\",\n\t\t\t\t\tsynonyms: action.payload.synonyms ?? \"\",\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t},\n} );\n\nconst selectors = {\n\tselectKeyphraseEntries: state => get( state, \"form.keyphrases\", {} ),\n\tselectKeyphrase: ( state, id = FOCUS_KEYPHRASE_ID ) => get( state, `form.keyphrases.${ id }.keyphrase` ),\n\tselectKeyphraseSynonyms: ( state, id = FOCUS_KEYPHRASE_ID ) => get( state, `form.keyphrases.${ id }.synonyms` ),\n\tselectKeyphraseIds: ( state ) => keys( get( state, \"form.keyphrases\" ) ),\n};\n\nexport const keyphrasesSelectors = {\n\t...selectors,\n\tselectKeyphrases: createSelector(\n\t\tselectors.selectKeyphraseEntries,\n\t\t( keyphraseEntries ) => map( keyphraseEntries, \"keyphrase\" ),\n\t),\n\tselectSynonyms: createSelector(\n\t\tselectors.selectKeyphraseEntries,\n\t\t( keyphraseEntries ) => map( keyphraseEntries, \"synonyms\" ),\n\t),\n};\n\nexport const keyphrasesActions = keyphrasesSlice.actions;\n\nexport default keyphrasesSlice.reducer;\n"],"file":"keyphrases.js"}