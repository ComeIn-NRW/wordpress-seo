{"version":3,"sources":["../../src/analysis/analyze.js"],"names":["mapKeys","mapValues","zipObject","Paper","FOCUS_KEYPHRASE_ID","createPaper","data","keyphrase","configuration","content","keyword","synonyms","description","metaDescription","title","seoTitle","titleWidth","seoTitleWidth","permalink","url","slug","date","locale","transformRelatedKeyprases","relatedKeyphrases","serializeSeoResults","seoResults","score","results","map","result","serialize","renameFocusKeyphraseKey","_","key","transformAnalysisResults","analysisResults","seo","readability","analyzePaper","worker","paper","analyzeRelatedKeywords","runResearches","researches","Promise","all","research","runResearch","createAnalyzeFunction","keyphrases","config","focusKeyphrase","researchResults"],"mappings":"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","sourcesContent":["import { mapKeys, mapValues, zipObject } from \"lodash\";\nimport { Paper } from \"yoastseo\";\nimport { FOCUS_KEYPHRASE_ID } from \"@yoast/seo-store\";\n\n/**\n * Creates a paper based on the given data, keyphrase and configuration.\n *\n * @param {Object} data The paper data and metadata, e.g. content, title, date, slug.\n * @param {Object} keyphrase The keyphrase to use for the analysis.\n * @param {Object} configuration Extra configuration.\n *\n * @returns {Paper} A paper that can be analyzed using the web worker.\n */\nconst createPaper = ( data, keyphrase, configuration ) => {\n\treturn new Paper(\n\t\tdata.content,\n\t\t{\n\t\t\t// Keyphrase data.\n\t\t\tkeyword: keyphrase.keyphrase,\n\t\t\tsynonyms: keyphrase.synonyms,\n\t\t\t// General data and metadata.\n\t\t\tdescription: data.metaDescription,\n\t\t\ttitle: data.seoTitle,\n\t\t\ttitleWidth: data.seoTitleWidth,\n\t\t\tpermalink: data.permalink,\n\t\t\turl: data.slug,\n\t\t\tdate: data.date,\n\t\t\t// Configuration data.\n\t\t\tlocale: configuration.locale,\n\t\t},\n\t);\n};\n\n/**\n * Transforms the object with related keyphrases to a a structure\n * that the analysis web worker is able to consume.\n *\n * @param {Object} relatedKeyphrases The related keyphrases.\n *\n * @returns {Object} The transformed related keyphrases.\n */\nconst transformRelatedKeyprases = relatedKeyphrases => mapValues(\n\trelatedKeyphrases,\n\t// 'Keyphrase' is renamed to 'keyword', 'synonyms' should stay as is.\n\t( { keyphrase: keyword, synonyms } ) => (\n\t\t{ keyword, synonyms }\n\t),\n);\n\n/**\n * Serialize the assessment results of each keyphrase.\n *\n * @param {Object} seoResults The SEO results object.\n *\n * @returns {Object} The SEO results object, but with the assessment results serialized.\n */\nconst serializeSeoResults = seoResults => mapValues(\n\tseoResults,\n\t// Keep the score as is, but serialize the assessment results.\n\t( { score, results } ) => (\n\t\t{ score, results: results.map( result => result.serialize() ) }\n\t),\n);\n\n/**\n * Put the focus keyphrase results under the `FOCUS_KEYPHRASE_ID` key, instead of the \"\" key.\n *\n * @param {Object} seoResults The results of the SEO analysis, each key corresponds to a keyphrase.\n *\n * @returns {Object} The results of the SEO analysis, where the focus keyphrase is available under the `FOCUS_KEYPHRASE_ID` key.\n */\nconst renameFocusKeyphraseKey = seoResults => mapKeys(\n\tseoResults,\n\t( _, key ) => key === \"\" ? FOCUS_KEYPHRASE_ID : key,\n);\n\n/**\n * Transforms the results from the analysis to the structure\n * that the SEO store expects.\n *\n * @param {Object} analysisResults The results returned by the analysis web worker.\n *\n * @returns {Object} The adapted results.\n */\nconst transformAnalysisResults = analysisResults => {\n\tconst results = {\n\t\tseo: analysisResults.result.seo,\n\t\treadability: analysisResults.result.readability,\n\t};\n\n\tresults.seo = renameFocusKeyphraseKey( results.seo );\n\n\tresults.seo = serializeSeoResults( results.seo );\n\tresults.readability.results = results.readability.results.map( result => result.serialize() );\n\n\treturn results;\n};\n\n/**\n * Analyzes a given paper inside of the analysis web worker.\n *\n * @param {AnalysisWorkerWrapper} worker The analysis web worker.\n * @param {Paper} paper The paper to analyze.\n * @param {Object} relatedKeyphrases The related keyphrases to use in the analysis.\n *\n * @returns {Promise<{Object}>} The results of the analysis.\n */\nconst analyzePaper = async ( worker, paper, relatedKeyphrases ) => {\n\t// Analyzing related keyphrases also analyzes the focus keyphrase.\n\tconst results = await worker.analyzeRelatedKeywords(\n\t\tpaper,\n\t\ttransformRelatedKeyprases( relatedKeyphrases ),\n\t);\n\n\treturn transformAnalysisResults( results );\n};\n\n/**\n * Runs a list of researches inside of the web worker.\n *\n * @param {string[]} researches The list of research names to run.\n * @param {AnalysisWorkerWrapper} worker The analysis web worker.\n * @param {Paper} paper The paper to run the researches on.\n *\n * @returns {Promise<Object>} The research results.\n */\nconst runResearches = async ( researches, worker, paper ) => {\n\tconst results = await Promise.all(\n\t\tresearches.map( research => worker.runResearch( research, paper ) ),\n\t);\n\n\treturn zipObject( researches, results );\n};\n\n/**\n * Creates a callback function to trigger a new analysis\n * based on the given analysis web worker and configuration.\n *\n * @param {AnalysisWorkerWrapper} worker The web worker wrapper.\n * @param {Object} configuration Configuration.\n *\n * @returns {function} The analysis callback function.\n */\nconst createAnalyzeFunction = ( worker, configuration ) => {\n\t/**\n\t * A callback function that analyzes the data from the SEO store.\n\t *\n\t * @param {Object} data The data from the SEO store.\n\t * @param {Object} keyphrases The keyphrases to analyze.\n\t * @param {Object} [config] Optional extra configuration to use.\n\t *\n\t * @returns {Object} The results of the analysis.\n\t */\n\treturn async ( data, keyphrases, config = {} ) => {\n\t\tconst { [ FOCUS_KEYPHRASE_ID ]: focusKeyphrase, ...relatedKeyphrases } = keyphrases;\n\n\t\tconst paper = createPaper( data, focusKeyphrase, configuration );\n\n\t\tconst [ analysisResults, researchResults ] = await Promise.all( [\n\t\t\tanalyzePaper( worker, paper, relatedKeyphrases ),\n\t\t\trunResearches( config.researches, worker, paper ),\n\t\t] );\n\n\t\tanalysisResults.research = researchResults;\n\n\t\treturn analysisResults;\n\t};\n};\n\nexport default createAnalyzeFunction;\n"],"file":"analyze.js"}