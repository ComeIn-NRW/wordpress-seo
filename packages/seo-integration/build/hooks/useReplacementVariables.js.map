{"version":3,"sources":["../../src/hooks/useReplacementVariables.js"],"names":["useSelect","useRef","SEO_STORE_NAME","filter","get","map","useSeoContext","useReplacementVariables","analysisType","select","selectAnalysisType","analysisTypeReplacementVariables","replacementVariables","cache","values","variable","getReplacement","join","cachedValues","current","replacementVariable","name","label","value","hidden","isVisible","recommendedReplacementVariables"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,QAAiC,QAAjC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AAAA;;AAC5C,QAAMC,YAAY,GAAGR,SAAS,CAAES,MAAM,IAAIA,MAAM,CAAEP,cAAF,CAAN,CAAyBQ,kBAAzB,EAAZ,CAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAuCL,aAAa,EAA1D;AACA,QAAMM,oBAAoB,GAAGR,GAAG,CAAEO,gCAAF,EAAqC,GAAGH,YAAc,YAAtD,EAAmE,EAAnE,CAAhC;AAEA,QAAMK,KAAK,GAAGZ,MAAM,EAApB;AAEA,QAAMa,MAAM,GAAGT,GAAG,CAAEO,oBAAF,EAAwBG,QAAQ,IAAIA,QAAQ,CAACC,cAAT,EAApC,CAAH,CAAmEC,IAAnE,CAAyE,EAAzE,CAAf;AACA,QAAMC,YAAY,GAAGb,GAAG,mBAAEQ,KAAK,CAACM,OAAR,mDAAE,eAAeP,oBAAjB,EAAuC,OAAvC,CAAH,CAAoDK,IAApD,CAA0D,EAA1D,CAArB,CAR4C,CAU5C;;AACA,MAAKC,YAAY,KAAKJ,MAAjB,IAA2B,CAAED,KAAK,CAACM,OAAxC,EAAkD;AACjDN,IAAAA,KAAK,CAACM,OAAN,GAAgB;AACfP,MAAAA,oBAAoB,EAAEP,GAAG,CAAEO,oBAAF,EAAwBQ,mBAAmB,KAAM;AACzEC,QAAAA,IAAI,EAAED,mBAAmB,CAACC,IAD+C;AAEzEC,QAAAA,KAAK,EAAEF,mBAAmB,CAACE,KAF8C;AAGzEC,QAAAA,KAAK,EAAEH,mBAAmB,CAACJ,cAApB,EAHkE;AAIzEQ,QAAAA,MAAM,EAAE,CAAEJ,mBAAmB,CAACK;AAJ2C,OAAN,CAA3C,CADV;AAOfC,MAAAA,+BAA+B,EAAErB,GAAG,CAAEF,MAAM,CAAES,oBAAF,EAAwB,eAAxB,CAAR,EAAmD,MAAnD;AAPrB,KAAhB;AASA;;AAED,SAAOC,KAAK,CAACM,OAAb;AACA,CAxBM","sourcesContent":["import { useSelect } from \"@wordpress/data\";\nimport { useRef } from \"@wordpress/element\";\nimport { SEO_STORE_NAME } from \"@yoast/seo-store\";\nimport { filter, get, map } from \"lodash\";\nimport { useSeoContext } from \"../seo-context\";\n\n/**\n * Formats the replacement variables.\n *\n * Caches the given replacement variables so that the memory address only changes when any value changes.\n *\n * @returns {{replacementVariables: {name: string, label: string, value: *}[], recommendedReplacementVariables: string[]}} The replacement variables\n *     and recommended replacement variables.\n */\nexport const useReplacementVariables = () => {\n\tconst analysisType = useSelect( select => select( SEO_STORE_NAME ).selectAnalysisType() );\n\tconst { analysisTypeReplacementVariables } = useSeoContext();\n\tconst replacementVariables = get( analysisTypeReplacementVariables, `${ analysisType }.variables`, [] );\n\n\tconst cache = useRef();\n\n\tconst values = map( replacementVariables, variable => variable.getReplacement() ).join( \"\" );\n\tconst cachedValues = map( cache.current?.replacementVariables, \"value\" ).join( \"\" );\n\n\t// Set the cache when any value changed, or when it was not set before.\n\tif ( cachedValues !== values || ! cache.current ) {\n\t\tcache.current = {\n\t\t\treplacementVariables: map( replacementVariables, replacementVariable => ( {\n\t\t\t\tname: replacementVariable.name,\n\t\t\t\tlabel: replacementVariable.label,\n\t\t\t\tvalue: replacementVariable.getReplacement(),\n\t\t\t\thidden: ! replacementVariable.isVisible,\n\t\t\t} ) ),\n\t\t\trecommendedReplacementVariables: map( filter( replacementVariables, \"isRecommended\" ), \"name\" ),\n\t\t};\n\t}\n\n\treturn cache.current;\n};\n"],"file":"useReplacementVariables.js"}