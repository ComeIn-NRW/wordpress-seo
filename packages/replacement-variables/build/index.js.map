{"version":3,"sources":["../src/index.js"],"names":["map","reduce","curry","applyReplacementVariables","variables","string","context","replaced","regexp","getReplacement","test","replace","createReplacementVariables","configurations","name","getLabel","isRecommended","isVisible","label","RegExp","apply"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,QAAmC,QAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGD,KAAK,CAAE,UAAEE,SAAF,EAAaC,MAAb;AAAA,MAAqBC,OAArB,uEAA+B,EAA/B;AAAA,SAAuCL,MAAM,CAC5FG,SAD4F,EAE5F,CAAEG,QAAF;AAAA,QAAY;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAZ;AAAA,WACCD,MAAM,CAACE,IAAP,CAAaH,QAAb,IACGA,QAAQ,CAACI,OAAT,CAAkBH,MAAlB,EAA0BC,cAAc,CAAEH,OAAF,CAAxC,CADH,GAEGC,QAHJ;AAAA,GAF4F,EAO5FF,MAP4F,CAA7C;AAAA,CAAF,CAAvC;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMO,0BAA0B,GAAKC,cAAF,IAAsB;AACxD,QAAMT,SAAS,GAAGJ,GAAG,CAAEa,cAAF,EAAkB;AAAA,QAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBN,MAAAA,cAAlB;AAAkCD,MAAAA,MAAM,GAAG,IAA3C;AAAiDQ,MAAAA,aAAa,GAAG,KAAjE;AAAwEC,MAAAA,SAAS,GAAG;AAApF,KAAF,uEAA+F,EAA/F;AAAA,WAAyG;AAC/IH,MAAAA,IAD+I;AAE/II,MAAAA,KAAK,EAAEH,QAAQ,EAFgI;AAG/IN,MAAAA,cAH+I;AAI/ID,MAAAA,MAAM,EAAEA,MAAM,IAAI,IAAIW,MAAJ,CAAa,KAAKL,IAAM,IAAxB,EAA6B,GAA7B,CAJ6H;AAK/IE,MAAAA,aAL+I;AAM/IC,MAAAA;AAN+I,KAAzG;AAAA,GAAlB,CAArB;AASA,SAAO;AACNb,IAAAA,SADM;AAENgB,IAAAA,KAAK,EAAEjB,yBAAyB,CAAEC,SAAF;AAF1B,GAAP;AAIA,CAdD;;AAgBA,eAAeQ,0BAAf","sourcesContent":["/**\n * @typedef {Object} ReplacementVariableConfiguration\n *\n * @property {string} name A unique name. By default, this is what is used in the regexp, see below.\n * @property {function: string} getLabel Function that should return the visual label that can be used in the UI.\n * @property {function(Object): string} getReplacement Function that should return the replacement value.\n * @property {RegExp} [regexp] Optional regular expression used to replace, defaults to the name surrounded by `%%`.\n * @property {bool} [isRecommended=false] Optional, whether the replacement variable is recommended to use in the editor.\n * @property {bool} [isVisible=true] Optional, whether the replacement variable is visible in the editor.\n */\n\n/**\n * @typedef {Object} ReplacementVariable\n *\n * @property {string} name A unique name. By default, this is what is used in the regexp, see below.\n * @property {string} label The visual label that can be used in the UI.\n * @property {function(Object): string} getReplacement Function that should return the replacement value.\n * @property {RegExp} regexp Regular expression used to replace.\n * @property {bool} isRecommended Whether the replacement variable is recommended to use in the editor.\n * @property {bool} isVisible Whether the replacement variable is visible in the editor.\n */\n\n/**\n * @typedef {Object} ReplacementVariablesInterface\n *\n * @property {ReplacementVariable[]} variables The list of replacement variables.\n * @property {function(string, Object?): string} apply Applies the replacement variables to a string.\n */\n\nimport { map, reduce, curry } from \"lodash\";\n\n/**\n\t * Applies the replacement variables to a string.\n\t *\n\t * @param {ReplacementVariable[]} variables The input string.\n\t * @param {string} string The input string.\n\t * @param {Object} [context] Optional single context argument for the `getReplacement` functions.\n\t *\n\t * @returns {string} The string, but with any replacement variables replaced.\n\t */\nexport const applyReplacementVariables = curry( ( variables, string, context = {} ) => reduce(\n\tvariables,\n\t( replaced, { regexp, getReplacement } ) => (\n\t\tregexp.test( replaced )\n\t\t\t? replaced.replace( regexp, getReplacement( context ) )\n\t\t\t: replaced\n\t),\n\tstring,\n) );\n\n/**\n * Creates replacement variables and provides an apply function.\n *\n * @param {ReplacementVariableConfiguration[]} configurations The replacement variable configurations.\n *\n * @returns {ReplacementVariablesInterface} The replacement variables and an apply function.\n */\nconst createReplacementVariables = ( configurations ) => {\n\tconst variables = map( configurations, ( { name, getLabel, getReplacement, regexp = null, isRecommended = false, isVisible = true } = {} ) => ( {\n\t\tname,\n\t\tlabel: getLabel(),\n\t\tgetReplacement,\n\t\tregexp: regexp || new RegExp( `%%${ name }%%`, \"g\" ),\n\t\tisRecommended,\n\t\tisVisible,\n\t} ) );\n\n\treturn {\n\t\tvariables,\n\t\tapply: applyReplacementVariables( variables ),\n\t};\n};\n\nexport default createReplacementVariables;\n"],"file":"index.js"}